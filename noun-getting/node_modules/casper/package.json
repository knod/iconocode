{
  "name": "casper",
  "version": "0.1.1",
  "description": "Helpers and handlers for building APIs in express.",
  "main": "index.js",
  "scripts": {
    "test": "tap ./test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:phuu/casper.git"
  },
  "author": {
    "name": "Tom Ashworth"
  },
  "license": "MIT",
  "devDependencies": {
    "underscore": "~1.4.4",
    "tap": "~0.4.1",
    "sinon": "~1.6.0"
  },
  "readme": "# casper\n\nHelpers and handlers for building (jsonp) APIs in [Express](http://expressjs.com).\n\n[![build status](https://secure.travis-ci.org/phuu/casper.png)](http://travis-ci.org/phuu/casper)\n\nAll caspers methods return a function that can be used in the Express callback chain, or as callbacks for your database.\n\n## example\n\nThe following examples assume this:\n\n```javascript\n// express 'app' available\nvar casper = require('casper');\n```\n\n### Basic handlers\n\nSend an empty opject:\n\n```javascript\n// res.jsonp({}) is sent\napp.get('/', casper.noop());\n```\n\nOr return some custom data:\n\n```javascript\n// res.jsonp({ hello: 'world' }) is sent\napp.get('/', casper.noop({\n  hello: 'world'\n}));\n```\n\n### Database callbacks\n\n#### casper.db\n\n`casper.db` returns a function to be used as a database callback. It assumes the first argument is an `err` and the second is the `data` is has to send â€“ an array or an object.\n\nIt takes Express' `req` and `res` as arguments:\n\n```javascript\ncasper.db(req, res)\n```\n\nFor example:\n\n```javascript\napp.get('/', function (req, res) {\n  YourModel\n    .find()\n    .exec(casper.db(req, res));\n});\n```\n\nIt can also take a callback which, if present, is called instead of sending data directly back to the client.\n\nWith a callback:\n\n```javascript\napp.get('/', function (req, res) {\n  YourModel\n    .find()\n    .exec(casper.db(req, res, function (err, data) {\n      // Do something with data\n    }));\n});\n```\n\nIf it is passed an error, it will pass that on to the client with a 500 status code. If it recieves no data, or an empty array, it will return the data it recieved with a 404 status.\n\n### Checks & filters\n\n#### capser.check.body\n\nCheck for the presence of data in the body using a key:\n\n```javascript\n// body is { testKey: \"Hello\" }\n// calls next() becuase present\napp.get('/',\n        casper.check.body('testKey'),\n        casper.noop());\n```\n\nIf the data is missing from the body it sends a 400 error, detailing the missing parameter:\n\n```javascript\napp.get('/',\n        casper.check.body('nonExistantKey'),\n        casper.noop());\n\n// results in\nres.jsonp(400, { error: 'Missing nonExistantKey from body.' });\n```\n\n#### capser.rm.body\n\nRemove a key from the body:\n\n```javascript\n// body is { testKey: \"Hello\", otherKey: \"World\" }\napp.get('/',\n        casper.rm('testKey'),\n        casper.noop());\n\n// afterwards body is { otherKey: \"World\" }\n```\n\n#### casper.allow.body\n\nWhitelist a key or array of keys allowed on the body.\n\n```javascript\n// body is { testKey: \"Hello\", otherKey: \"World\" }\napp.get('/',\n        casper.allow.body('otherKey'),\n        casper.noop());\n\n// afterwards body is { test: \"Hello\" }\n```\n\nWith an array:\n\n```javascript\n// body is { testKey: \"Hello\", otherKey: \"World\", unwantedKey: \"World\" }\napp.get('/',\n        casper.allow.body(['testKey', 'otherKey']),\n        casper.noop());\n\n// afterwards body is { testKey: \"Hello\", otherKey: \"World\" }\n```\n\n## install\n\n`npm install casper`\n\n## license\n\nMIT",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/phuu/casper/issues"
  },
  "homepage": "https://github.com/phuu/casper",
  "_id": "casper@0.1.1",
  "_shasum": "a9eacf26986adadc2dbc7171b6e7ceb48667a0f7",
  "_from": "casper@",
  "_resolved": "https://registry.npmjs.org/casper/-/casper-0.1.1.tgz"
}
